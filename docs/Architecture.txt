REQUEST MANAGER

+-------------------------------+
|     Input: Url received       |
+-------------------------------+
              |
              v
+-------------------------------+
|  Step 1: Extract baseUrl      |
|  (from Uri.Authority)         |
+-------------------------------+
              |
              v
+-------------------------------+
|  Step 2: Fetch robots.txt     |
|  └─ Check cache first         |
|  └─ If miss → HTTP GET        |
+-------------------------------+
              |
              v
+-------------------------------+
|  Step 3: Check crawlability   |
|  └─ If disallowed → abort     |
|  └─ If allowed or missing → continue |
+-------------------------------+
              |
              v
+-------------------------------+
| Step 4: Check request status  |
|     (from cache)              |
+-------------------------------+
              |
              v
+---------------------------+   +------------------------------------+
|       Status Code         | →|              Action                 |
+---------------------------+   +------------------------------------+
| 404 Not Found             | →| Abort — do not retry                |
| 429 Too Many Requests     | →| Read Retry-After → schedule retry   |
| 403 Forbidden             | →| Abort — honor denial                |
| 503 Service Unavailable   | →| Schedule retry with default delay   |
| 200 OK                    | →| Was visited — check modification date |
| No status found           | →| Proceed — never visited or expired  |
+---------------------------+   +------------------------------------+
              |
              v
+-------------------------------+
| Step 5: Publish event         |
| └─ ScrapeUrlEvent             |
| └─ Includes metadata if needed|
+-------------------------------+


ScrapeUrlEvent
     ↓
Scraper fetches content
     ↓
Emits ScrapeResultEvent {
    Url,
    StatusCode,
    LastModified?,
    ReasonPhrase?,
    RetryAfter?,
    RedirectLocation?
}
     ↓
Crawler handles ScrapeResultEvent
     ↓
→ Updates status cache
→ Applies routing logic (retry, discard, etc.)
→ Optionally triggers downstream enrichment (e.g., AddNode to graph)