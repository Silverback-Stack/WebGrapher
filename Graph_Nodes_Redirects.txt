

### 🔁 Suggested Crawl Flow with Redirect Binding

1. **Page contains link to `B` → Create dummy node `B`**

2. **Crawl `B`**
   - Resolve to `C`
   - Check:  
     a) Does `C` already exist?  
     b) If yes → populate `C`, leave `B` as dummy  
     c) If no → mutate `B` to `C` (i.e., update node key or replace)

3. **For future pages linking to `B`**
   - Always treat `B` as a dummy
   - When crawling `B` again, detect redirect to `C`
   - Skip creating new node since `C` is populated

---

### 💡 Key Reinforcements

- Treat **dummy nodes as identity placeholders**—never intended for population if they redirect.
- **Populate only the terminal node**, and never mutate dummy nodes once the target exists.
- Optionally record redirect lineage (e.g. `B → C`) for metadata, not for edge rewiring.

---

### 🧠 Bonus (if you want to auto-resolve edges)

If you later want to expose an "effective graph" (i.e. actual destinations), you could build a lightweight redirect index:

```csharp
Dictionary<Uri, Uri> redirectIndex;
```

Then when rendering:
- `Edge: A → B` becomes `A → C` if `redirectIndex[B] = C`
- But graph storage remains unchanged

That gives clarity without compromising crawl fidelity.

---



ADD EXPIRY SO THAT WE CAN BREAK REDIRECT LOOPS


### 🧭 Revised Crawl Rules with Expiry Logic

1. **Upon discovering link `B` in page `A`:**
   - If node `B` exists **and hasn’t expired**, skip submitting new request  
   - If node `B` exists **but has expired**, enqueue for refresh  
   - If node `B` doesn’t exist, create dummy and enqueue request  

2. **When fetching a page:**
   - If the fetched URL is `C` (redirected from `B`),  
     → check if node `C` exists and has expired  
     → if exists + fresh → no update  
     → if exists + expired → refresh  
     → if not exists → create `C`, mark `B` as dummy  

---

### 🧠 Metadata You Might Want Per Node:

```json
{
  "url": "https://example.com/c",
  "dummy": false,
  "fetchedAt": "2025-07-31T20:44:00Z",
  "expiresAt": "2025-08-07T20:44:00Z",
  "redirectedFrom": ["https://example.com/b"]
}
```

This allows flexible handling: you can even prioritize expiry recrawls differently than fresh discoveries.

---

