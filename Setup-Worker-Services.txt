
Setup Worker Services
=====================

WebGrapher.Workers
------------------

Create a new project in Visual Studio

  Template: Worker Service

  Project Name: Crawler.WorkerService

  Location: \WebGrapher\src\

Click Next


  Framework: .NET 8.0

  Enable Container Support: Tick

  Container OS: Linux

  Container build type: Dockerfile

  Do not use top-level statements: Tick

Click Create


Right click project name and Set as Startup Project

From Play dropdown button select: Debug Properties

From the left select: Crawler.WorkerService

Name to: Crawler.WorkerService (Azure)

Add Environment settings:

  Name: DOTNET_ENVIRONMENT
  Value: Production

Close Launch Profile Properties window.

Configutr Docker file to locate and build project and dependencies.

Repeat for other services.



Publish Worker Services to Azure
================================

Container Registry
------------------

First we must create a Container Registry to store the builds / docker images.

From Azure Portal -> Container Registries

Click Create

  Subscription: Default

  Resource group: webgrapher-resources

  Registry name: webgraphercontainerregistry

  Domain name label scope: Resource Group Reuse (keep it unique within resource group scope)

  Registray domain name: [auto-generated]

  Use availability zones: False

  Pricing plan: Basic

  Role assignment permissions mode : 4RBAC Registry Permissions (Use when all images in the registry are equally trusted)

 Click review & Create




Publish Worker Service : Add a publish profile
----------------------------------------------

From Visual Studio right click Worker Service and choose -> Publish

CLick : Add a publish profile

Target: Azure

Click Next

Specify target: Azure Container Apps (Linux)

Click Next

Subscription: Default

Container App : Create a new instance or select:

	Container app name: crawlerworkerservice-app

	Subscription name: Default

	Resource group: webgrapher-resources (UK South)

	Container Apps environment: Create a new instance or select previously created one:

		Environment name: webgrapher-apps-env-xxx [auto-generated] (Rename to WebGrapher as we should create 1 apps environment for all services)

		Location: UK South

		Azure Log Analytics workspace: DefaultWorkspace-xxx

		Click Ok

	Container name: crawlerworkerservice

	Click Create

Wait until service is created (Takes a few minutes)

Select service and click Next

Registry : webgrapher-resources/webgraphercontainerregistry

Click Next

Container build: Select Docker Desktop

Click Next

Deployment type: Publish (generates pubxml file)

Click Finish.

If asks to enable Admin user - click Yes

Once done, close the dialog.


Publish Worker Service : Publish to Azure
-----------------------------------------

Click Publish button

If Docker Desktop not installed, it will display:
Visual Studio container tools require Docker Desktop.  To get it, see https://go.microsoft.com/fwlink/?linkid=847268
Download and install. Be sure to install any updates.


The project will build and then publish to Azure.

Visit Azure Portal -> Container Apps

Select Container App -> Monitoring -> Log Stream

Check is running correctly.



Disable Ingress
===============

For Crawler, Scraper & Normalisation Service only:

From Azure portal -> Container Apps -> App

Under Networking select Ingress

Uncheck Ingress and save chnages.

This will disable public HTTP traffic and reduce attck surface / exposure.



Setup Scaling
=============

Configure permissions
---------------------

Azure Poral -> Service Bus

Select Service bus namesapce : webgrapher

Select -> Access Control

Click: Add role assignment

Under Role search for: Azure Service Bus

Select: Azure Service Bus Data Receiver

Click: Next

From Members tab

  Assign access to: Managed identity

  Click Select members:

    Subscription: Default

	Managed identity: Container App

	Select: crawlerworkerservice-app and all other apps

	Click: Select

Click Next

Click Review + assign







Configure Container Apps for scaling
-----------------------------------

From Azure Poral -> Container Apps

Select Container App: crawlerworkerservice-app

Select Application -> Scale

  Min replicas: 1

  Max replicas: 10

  Cooldown period: 300 seconds

  Polling interval: 30 seconds

Scale Rules -> Add

  Rule name: servicebus-topic-scaler

  Type: Custom preset

  Apply: Azure Service Bus (topic subscription)

	topicName: crawlpageevent

	subscriptionName: Crawler

	namespace: webgrapher

	messageCount: 10 (Number of messages per replica before scaling up)

	Managed Identity:

	Tick: Authenticate with a Managed Identity

	Managed identity: System assigned

	Click: Add scale rule

	Click: Save as a new revision



REPEAT STEPS FOR OTHER SERVICES



Setup Web-API for Graphing
==========================

From Azure -> Container Apps

Select: graphingworkerservice-app

Select Networking -> Ingress

Make a note of the Endpoint Url and port - this is the public address of the worker service

Eg: https://graphingworkerservice-app.ambitioushill-75e11e34.uksouth.azurecontainerapps.io : 8080


Select Application -> Containers 

Select Environment variables tab

Click Add:

  Name: WebApi__Host

  Source: Manual Entry

  Value: http://0.0.0.0:8080 (this will start the api on port 8080 which will be mapped to by the public address)

Click Save as new revision

Select Overview and Stop and Restart Container App

Select Monitoring -> Log Stream

Confirm API is running

Now visit Swagger at the public url secure connection (be sure to add swagger at end of url)

https://graphingworkerservice-app.ambitioushill-75e11e34.uksouth.azurecontainerapps.io/swagger



Setup Web-API for Streaming
===========================

Repeat above steps for streaming.

Under Environment variables:

Click Add:

  Name: Streaming__HostedSignaR__Host

  Source: Manual Entry

  Value: http://0.0.0.0:8080 (this will start the api on port 8080 which will be mapped to by the public address)

Now visit the public Url secure connection:

https://streamingworkerservice-app.ambitioushill-75e11e34.uksouth.azurecontainerapps.io/
